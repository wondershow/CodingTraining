/*

//This solution is very simple. Try to make use (root, lTree, rTree) of a BST's preorder, verify this 
// feature at each subtree.
class Solution {
    public boolean verifyPreorder(int[] preorder) {
        if (preorder == null || preorder.length <= 1) {
            return true;
        }
        return verifyHelper(preorder, 0, preorder.length - 1);
    }
    
    private boolean verifyHelper(int[] preorder, int start, int end) {
        if (start > preorder.length - 1 || start >= end || end < 0) {
            return true;
        }
        int boundary = start + 1;
        for (; boundary <= end; boundary++) {
            if (preorder[boundary] > preorder[start]) {
                break;
            }
        }
        for (int i = boundary; i <= end; i++) {
            if (preorder[i] < preorder[start]) {
                return false;
            }
        }
        return verifyHelper(preorder, start + 1, boundary - 1) &&  verifyHelper(preorder,boundary, end);
    }
}

*/

/*
//This solution uses a trick that, when we iterative preorder traverse a BST, 
//the stack always pop out a min value at even. All the elements in the stack from bottom to pop 
//is from large to small and the unvisited nodes are the right-descendent of the node on the stack bottom
// therefore, the stack top element is always the minimum element. 
class Solution {
    public boolean verifyPreorder(int[] preorder) {
        if (preorder == null) {
            return true;
        }
        Stack<Integer> stack = new Stack();
        int low = Integer.MIN_VALUE;
        for (int i = 0; i < preorder.length; i++) {
            if (preorder[i] < low) {
                return false;
            }
            while (!stack.isEmpty() && preorder[i] > stack.peek()) {
                low = stack.pop();
            }
            stack.push(preorder[i]);
        }
        return true;
    }
}

*/
